trait Issue extends Entity with Blockable with HasN {
  background = "#545790"
  object field generator: Int?
  impl func nextN = increment(Issue.generator)
  impl func itemRoles = [Developer, ProductOwner, Stakeholder, QA]
  impl func splitPerUser(role: String): Bool = role == "flow2b.net.dev.Stakeholder"

  field estimations: [Estimation]?
  func stdCharge: UMoney[our]? = 0
  compute estimation: Estimation? = if (let estimations) Estimation.avg(estimations)
  override func itemOrder = ("Issue", number)
  func devType: DevType = product.devType
  impl func searchWeight = status.sw
  override func isForUser(owner: IUser?, role: Role): Bool = {
    if (let u = owner?.as[User]) {
      if (role == Developer || role == Tech) {
        if (status == InProgress) developer == User.current
        else u.developingBacklogs.contains(backlog)
      } else if (role == ProductOwner) u.ownedBacklogs.contains(product.backlog)
      else super.isForUser(owner, role)
    } else true
  }
  impl func canRead = product.canRead
  impl func canWrite = product.canWrite
  
  func statuses: [IssueStatus] = IssueStatus.all.filter(_ !in [QAReview, ToTest, Verified])!.toSet
  
  ref field _product: DevProduct by devIssues 
  var product: DevProduct
  func developer: User? = null
  
  impl func products = [product]
  
  ref field milestone: Milestone? from product.milestonesSelection by milestoneIssues {
    init = {
      new.products = [product]
    }
  }
  func defaultStatus: IssueStatus = Entered
  ref field status: IssueStatus {
    default = defaultStatus
    from = statuses
    update = {
      statusUpdated()
    }
  }
  func backlog: Backlog? = _product.backlog
  
  func requireEfforts = true
  ref field effort: Effort? {
    label = "Effort for developers"
    from = Effort.all.toSeq.filter(value <= 20).toSet + Effort.Infinity
    validate = if (requireEfforts && status.effort && !blockEffort) "Efforts should be selected for the statues $status"
  }
  func blockEffort = effort
  field blocksItems: [Blockable]? by blockedByIssues 
  field desires: [IDesire]? inline by issue {
    touchCascade = false
  }
  impl func isInBacklog: Bool = status.backlog
  func type: DevIssueType
  impl func active = status.active
  
  event statusUpdated: Void = {
  }
  func activeBlocksItems: [Issue]? = blocksItems.filter(_.isInBacklog)*.as[Issue]
  func allDesires(er: UDec[2]): [RankedDesire]? = {
    (desires + additionalDesire).map(d => RankedDesire(desire = d, rank = d.rank*er)) + 
      activeBlocksItems.flatMap(bi => bi.allDesires(bi.blockEffort?.rank.alt(1.00).min(er)))
  }
  func allProducts: [DevProduct] = activeBlocksItems*.allProducts + product
  func allMilestones(er: UDec[2]): [RankedMilestone]? = {
    (milestone.toSeq + blocksItems.filter(_.isInBacklog)*.as[Milestone])
      .map(m => RankedMilestone(milestone = m, rank = m.rank*er)) 
      + activeBlocksItems.flatMap(bi => bi.allMilestones(bi.blockEffort?.rank.alt(1.00).min(er)))
  }
  
  impl func rank: UDec[2] = 1
  /*impl system ref stored compute rank: UDec[2] = {
    let er = efforRank
    let products = allProducts.distinct
    let desires = allDesires(er)
    let milestones = allMilestones(er)
    let pps = products*.as[PersonalProject]*.actor
    (products*.rank.sum!*er*0.05
      + desires.filter(desire.is[Desire]).groupBy(desire.as[Desire]!.actor).agg(_*.rank.max).toSeq.filter(!pps.contains(actor))*.rank.sum
      + desires.filter(!desire.is[Desire]).groupBy(desire.issue.product).agg(_*.rank.max).values.sum
      + milestones.groupBy(milestone).agg(if(key.products.contains(this.product)) (_*.rank.max - this.product.rank).max(0.00).as[UDec[2]] else _*.rank.max).values.sum
      )
  }*/
  
  
  func additionalDesire: IIDesire? = null
  
  func efforRank: UDec[2] = {
    if (let bi = blockedByActiveIssues) 0.90*blockEffort?.rank.alt(1.00).min(bi*.efforRank.min)
    else blockEffort?.rank.alt(1.00)
  }
  //func productEfforRank(p: DevProduct): Dec[2] = if(this.product == p) blockEffort?.rank.alt(1.00).max(1.00) else 1.00
  
  impl event onSave = {
    if (touched) {
      if (let la = activities.last) {
        if (status == Revision 
            && descUpdated
            && la.entities.first == this
            && !updated(status) 
           ) 
        {
          status = defaultStatus
        }
      }
      if (status == Pending && !blockedByActiveIssues) {
        status = defaultStatus
        blocksItems*.as[Issue].filter(_.status == Pending).foreach(_.status = defaultStatus)
      }
      if (status == Postponed && updated(blocksItems) && blocksItems.count > origin(blocksItems).count) {
        status = Entered
      }
      blocksItems*.touch
      blockedByIssues*.touch
      //milestone?.touch
      //product?.touch
      checkBlockedIssues([])
    }
    if (dataUpdated) {
      notifyAll(ProductOwner)
    }
  }
  func checkBlockedIssues(issues: [Issue]?): Void = { 
    if (issues.contains(this)) {
      throw "Cycle in blocks for ${this} with $issues"
    }
    if (let bi = blocksItems*.as[Issue]) {
      let issues1 = issues + this
      bi.foreach(_.checkBlockedIssues(issues1))
    }
  }
  func descUpdated: Bool
  
//  system stored compute sort: UDec[2] = {
//    rank + (if (status in [] Approved || status == Entered) 0.00 else 2.00)*1000000.00
//  }
  
  report Report {
    field backlog: Backlog? {auto} 
    field product: DevProduct? {auto} 
    field status: [IssueStatus]? {auto}
    /*field qa: User? {
      label = "QA"
      from = User.all.filter(is(QA))
    }
    field po: User? {
      label = "PO"
      from = User.all.filter(is(ProductOwner))
    }
    field dev: User? {
      label = "Developer"
      from = User.all.filter(is(Developer))
    }
    field stakeholder: User? {
      label = "Stakeholder"
      from = User.all.filter(is(Stakeholder))
    }*/
    
    impl view list = Issue.all/*.filter(
      (!qa || (status.qa && isFor(qa, QA))) &&
      (!po || (status.backlog && po!.ownedBacklogs.contains(backlog))) &&
      (!dev || (status.dev && dev!.developingBacklogs.contains(backlog))) &&
      (!stakeholder || status.backlog))*/
    .sortBy(number) >> nav { list { } }
  }
}



class RankedDesire {
  field desire: IIDesire
  field rank: UDec[2]?
}

class RankedMilestone {
  field milestone: Milestone
  field rank: UDec[2]?
}