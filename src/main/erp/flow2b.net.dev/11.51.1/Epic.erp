entity Epic extends IUserStory {
  background = "#7b3a80" icon = "weight-hanging"
  impl func numPrefix: String = "E"
  
  impl func contentIssues: [Issue]? = epicIssues
  field epicIssues: [BacklogIssue]? by epic
  impl view ref = y {
    x{number >> field(fontStyle = Label)  title product >> field(fontStyle = Label)}
    x{DevIssueType.Epic epicEffort blockStatus >> field(compact = false) status >> field(editMode = AlwaysEdit) itemUser}
  }
  impl view traitItem = grid(labels = None) {
    x{title >> field(stretch = 1) number >> field(fontStyle = Label)}
    row {product milestone feature}
    x {DevIssueType.Epic epicEffort blockStatus >> field(compact = false) status >> field(editMode = AlwaysEdit) itemUser}
  }
  ref compute epicEffort: Effort? {
    value = contentEffort.or(effort)
    update = {
      effort = new
    }
  }
  override func blockEffort = epicEffort
  
  impl event onSave = {
    let closed = epicIssues.all(_.status.closed) && epicIssues.exists(_.status == Closed)
    let impled = !closed && epicIssues.exists(_.status.implemented) && epicIssues.all(_.status.implemented || _.status.closed)
    if (closed && status != Closed) {
      status = Closed
    } else if (impled && status != Implemented) {
      status = Implemented
    } else if (status == Closed && !closed) {
      status = Todo 
    } else if (status == Implemented && !impled) {
      status = Todo
    } else if (updated(status)) {
      let o = origin(status)
      epicIssues.filter(status == o).foreach{i =>
        i.status = this.status
        i.save
      }
    }
  }
  
  /*impl view quick = grid {
    x(flow = false, label = ""){
      blockStatus >> field(compact = false)
      status >> field(editMode = AlwaysEdit)
      name >> field(stretch = 1, fontStyle = H2)
      number >> field(fontStyle = Label)
    }
    product
    epicEffort
    role >> field(label = "As a (choose carefully)", placeholder = "who")
    goal >> field(label = "I want (make it precise and understandable for a developer)", placeholder = "what (a developer should be able to understand how to implement it)")
    benefit >> field(label = "so that (put some efforts to make it clear)", placeholder = "why")
    additionalInfo >> field(label = "Additional Information")
  }*/
  
  impl view form = nav {
    grid {
      x(flow = false, label = ""){
        blockStatus  >> field(compact = false)
        status >> field(editMode = AlwaysEdit)
        name >> field(stretch = 1, fontStyle = H2)
        number >> field(fontStyle = Label)
      }      
      row{epic >> field(title = title) feature}
      row {
        product
        milestone >> field(title = name)
        backlog >> field(editMode = AlwaysRead)
      }
      spuUses
      epicEffort
      devType >> field (label = "", visible = estimations)
      estimations >> field (label = "")
      role >> field(label = "As a (choose carefully)", placeholder = "who")
      goal >> field(label = "I want (make it precise and understandable for a developer)", placeholder = "what (a developer should be able to understand how to implement it)")
      benefit >> field(label = "so that (put some efforts to make it clear)", placeholder = "why")
      additionalInfo >> field(label = "Additional Information")
      epicIssues >> field(label = "Issues in the epic")
      blockedByIssues >> field(label = "This epic is blocked by")
      blocksItems >> field(label = "This epic blocks")
      desires

    }
     
    edit {
      x{
        button("To User Story") {
          convertTo(UserStory)
        }
      }
    }
  }
  impl func type: DevIssueType = Epic
  
  override func statuses: [IssueStatus] = IssueStatus.all.filter(_ !in [ToTest, QAReview, ToDoc, Failed, InProgress, Verified])!.toSet 
}


