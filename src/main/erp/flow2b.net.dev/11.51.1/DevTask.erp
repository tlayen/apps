enum CodeDebtSeverity(rank: UDec[2]) {
  case Critical(rank = 1.5) {
    color = "white"
    background = "#c00"
  }
  case Major(rank = 0.3) {
    background = "#f99"
  }
  case Minor(rank = 0.1) {
    background = "#efd"
  }
}

entity DevTask extends DevIssue {
  background = "#b96014" icon = "code"
//  ref field severity: CodeDebtSeverity
  impl func numPrefix: String = "D"
  field description: Text
  //impl func additionalDesire: IIDesire? = IntDesire(issue = this, rank = product.rank*severity.rank)
  
  impl view ref = y {
    x{ number >> field(fontStyle = Label) title product >> field(fontStyle = Label)}
    x {DevIssueType.Dev effort blockStatus >> field(compact = false) status >> field(editMode = AlwaysEdit) itemUser}
  }
  impl view traitItem = grid(labels = None) {
    x {title >> field(stretch = 1) number >> field(fontStyle = Label)}
    row {product milestone space}
    x {DevIssueType.Dev effort blockStatus >> field(compact = false) status >> field(editMode = AlwaysEdit) itemUser}
  } 
  impl func type: DevIssueType = Dev
  impl func descUpdated: Bool = updated(description) || updated(title)  
  
  /*impl view quick = grid {
    x(flow = false, label = ""){
      blockStatus >> field(compact = false)
      status >> field(editMode = AlwaysEdit)
      name >> field(stretch = 1, fontStyle = H2)
      number >> field(fontStyle = Label)
    }
    product
    effort
    description
  }*/
  impl view form = nav {
    grid(label = "Main") {
      x(flow = false, label = ""){
        blockStatus >> field(compact = false) 
        status >> field(editMode = AlwaysEdit)
        name >> field(stretch = 1, fontStyle = H2)
        number >> field(fontStyle = Label)
      }
      core
      apps
      row{epic >> field(title = title) feature}
      developer
      row {
        product
        milestone >> field(title = name)
        backlog >> field(editMode = AlwaysRead)
      }
      spuUses

      effort
      devType >> field (label = "", visible = estimations)
      estimations >> field (label = "")
      
      description
      blockedByIssues >> field(label = "This code debt is blocked by")
      blocksItems >> field(label = "This code debt blocks")
      desires
    }
      
    edit {
      x{
        button("To User Story") {
          let d = description
          let r = convertTo(UserStory)
          r.goal = d
        }
        button("To Bug") {
          let d = description
          let r = convertTo(Bug)
          r.steps = d
        }
      }
    }
  }
}