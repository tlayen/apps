extend trait Actor {
  field projects: [PersonalProject]? read by actor {views = []}
  field desires: [Desire]? inline by actor {
    touchCascade = false
  }
  compute rank: UDec[2] = 1.00
  
  
  extend impl event onSave = {
    projects*.touch
  }
}

extend entity Company {
  extend view form = projects
  extend view form = extend("buttons") {
    button("Workspace", icon = "external-link-alt", visible = actorWorkspaceId) {
      UI.openUrl(System.url + "#13_$actorWorkspaceId")
    }
  }
}
extend entity Person {
  extend view form = projects
}


enum CustomerHappiness(level: Dec[2]?) {
  case Angry(level = -1) { color = "white" background = "#c00" icon="angry"}
  case Unhappy(level = -0.5) {background = "#f99" icon="frown"}
  case OK(level = 0){background = "#ed9" icon="meh"}
  case Happy(level = 0.5) {background = "#dea" icon="grin"}
  case Excited(level = 1) {color = "white" background = "#090" icon="grin-hearts"}
}

enum CustomerState(current: Bool) {
  case Preparation(current = false) {background = "#ed9" icon = "play"}
  case Deployment(current = true) {background = "#8bf" icon = "spinner"}
  case Active(current = true) {background = "#dea" icon = "atom"}
  case Cancelled(current = false) {background = "#999" icon = "times-circle"}
  case DeploymentFailed(current = false) {background = "#999" icon = "hand-point-down"}
  case Churned(current = false) {background = "#999" icon="skull-crossbones"}
}

enum CustomerType {
  case Business {background = "#b6e2c6" icon = "store"}
  case Partner {background = "#dec4ee" icon = "handshake"}
}

extend entity CompanyPerson {
  field happiness: CustomerHappiness {
    views = []
    default = OK
    visible = company.as[LegalEntity]?.customer
  }
  
  extend view stateView = happiness
}

extend entity Customer {
  compute supportUnits: Int? {
    availableFor = List
    value = {
      SupportUnitReg.current.find(customer == this).result.get?.balance
    }
  }
  extend compute chargeType: ChargeType {
    visible = false
  }  
               
  field state: CustomerState {
    default = Preparation 
    views = [] 
    update = {
      if (new == Deployment && !deploymentDate) deploymentDate = now
      if (new == Active && !activeDate) activeDate = now
      if (new == Churned && !churnDate) churnDate = now
      if (new == DeploymentFailed && !failureDate) failureDate = now
    }
  }  
  field types: [CustomerType] {
    default = [Business]
    views = []
  }
  field happiness: CustomerHappiness {
    views = []
    default = OK
  }
  field preparationDate: Date {
    default = now
    views = []
  }
  field deploymentDate: Date? {
    views = []
    visible = state !in [Preparation, Cancelled]
    validate = if (!deploymentDate && state !in [Preparation, Cancelled]) "Deployment date is required"
  }
  field activeDate: Date? {
    views = []
    visible = state in [Active, Churned]
    validate = if (!activeDate && state in [Active, Churned]) "Active date is required"
  }
  field churnDate: Date? {
    views = []
    visible = state == Churned
    validate = if (!churnDate && state == Churned) "Churn date is required"
  }
  field failureDate: Date? {
    views = []
    visible = state == DeploymentFailed
    validate = if (!failureDate && state == DeploymentFailed) "Failure date is required"
  }
  compute stateDur: Duration[week, 0]? = {
    let d = Date.now - {
      if (state == Deployment) deploymentDate! 
      else if (state == Active) activeDate! 
      else if (state == Churned) churnDate! 
      else if (state == DeploymentFailed) failureDate! 
      else preparationDate
    }
    d.to[Duration[week]].round(round, 0)
  }
  extend override view stateView = group{
    types state 
    //stateDur 
    extension("state") happiness >> field(editMode = AlwaysEdit)
    supportUnits label("Units")
  }
  extend view form = extend("top"){
    row{preparationDate deploymentDate activeDate}
    row{failureDate churnDate space}
    legalEntity.projects
  }
}