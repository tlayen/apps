entity TechTaskType {
  impl field title: String
  ref field devType: DevType = Support
  ref field stdCharge: UMoney[our]? {label = "Standard Charge"}
  field usualEffort: Effort?
  ref field requireName: Bool
  field params: [TaskParam]? inline by taskType  {label = "Parameters"}
  field desc: Text? {
    label = "Description"
  }
  impl event onSave = {
    if (updated(requireName) && requireName) {
      TechTask.all.filter(taskType == this && !name).update(name = "???")
    }
  }
}
entity TaskParam {
  field taskType: TechTaskType
  impl field title: String
  ref field key: String?
  ref field desc: Text?
}

enum Urgency(rank: UDec[2], norm: Duration ) {
  case Urgent(rank = 1.5, norm = 24_hour) {
    color = "white"
    background = "#c00"
  }
  case Usual(rank = 0.3, norm = 48_hour) {
    background = "#f99"
  }
  case NotUrgent(rank = 0.1, norm = 168_hour) {
    background = "#efd"
  }
}

object ITUnassignedTech extends IssueType[TechTask] {
  impl func title = "Unassigned Tech Task"
  impl func hasIssue(item: TechTask) = {
    item.status in [Todo, InProgress, Failed] && !item.tech
  }
  impl func fixes(item: TechTask) = if (User.current?.is(Support)) [
    Fix(text = "Take the task", acts = [
      Act(label = "Take", icon = "spinner", color = "#8bf", do = {
        item.status = InProgress
        item.tech = User.current
        UI.save(item)
      })
    ])
  ]
  impl func defaultLevel = Warning
}

object ITTodoTech extends IssueType[TechTask] {
  impl func title = "To Do Tech Tasks"
  impl func defaultLevel = ToDo
  impl func isForUser(item: TechTask, user: User) = user == item.tech
  impl func hasIssue(item: TechTask) = {
    item.status.active
  }
  impl func fixes(item: TechTask) = [
    Fix(text = "Respond the incident and close", acts = [
      Act(label = "Close", icon = "check-circle", color = "#090", do = {
        item.status = Closed
        item.tech = User.current
        UI.save(item)
      })
    ])
    Fix(text = "Clarify the incident and send to revision", acts = [
      Act(label = "Revision", icon = "redo", color = "#ef8e48", do = {
        item.status = Revision
        item.tech = User.current
        UI.save(item)
      })
    ])
    Fix(text = "Make the incident blocked by another issue, inform the customer and set pending", acts = [
      Act(label = "Pending", icon = "hourglass-half", color = "#d63b89", do = {
        item.status = Pending
        item.tech = User.current
        UI.save(item)
      })
    ])
  ]
}

entity TechTask extends Issue {
  background = "#456ca9" icon = "wrench"
  impl compute title {
    value = "$number $product $taskType $name"
  }
  override compute devType = taskType.devType
  impl func stdCharge: UMoney[our]? = taskType.stdCharge
  ref field taskType: TechTaskType {
    available(Inline).for(Inline)
    update = {
      if (!effort) {
        this.effort = new.usualEffort
      }
      new.params.map(p => ParamValue(tech = this, param = p))
    }
  }
  ref field name: String? {
    validate = if (taskType.requireName) "Name is required for the task type $taskType"
  }
  
  impl compute product: PersonalProject {
    value = _product.as[PersonalProject]!
    update = {
      _product = new
    }
  }
  ref field tech: User? {from = User.all.filter(is(Tech))}
  impl func developer = tech
  impl event statusUpdated = {
    if (status in [InProgress, Failed, Implemented, ToTest, Closed, Verified] && User.current?.is(Tech)) {
      tech = User.current
    }
  }
  field params: [ParamValue]? inline by tech 
  override func isBlocking(issue: Issue): Bool = issue.status.blocking || issue.status == Implemented
  ref field urgency: Urgency = Usual
  impl func numPrefix: String = "T"
  field desc: Text? {label = "Description"}
  impl func additionalDesire: IIDesire? = IntDesire(issue = this, rank = product.rank*urgency.rank)
  impl func itemRoles = [Tech, Stakeholder]
  compute howTo: Text? = {
    params.fold(taskType?.desc, if (let key = param.key) acc.replace(key, strValue.trim) else acc)
  }
  override func issueTypes = super.issueTypes - ITUnassigned + ITUnassignedTech + ITTodoTech
 
  impl view ref = y {
    x {number >> field(fontStyle = Label) title }
    x {DevIssueType.Tech urgency effort blockStatus >> field(compact = false) status >> field(editMode = AlwaysEdit) tech}
  }
  impl view traitItem = grid(labels = None) {
    title >> field(stretch = 1)
    row {product milestone space}
    x {DevIssueType.Tech urgency effort blockStatus >> field(compact = false) status >> field(editMode = AlwaysEdit) tech}
  } 
  impl func type: DevIssueType = Tech
  impl func descUpdated: Bool = updated(activities) && activities.last?.comment
  
  impl view form = nav {
    grid {
      issuesView
      x(flow = false, label = ""){
        blockStatus >> field(compact = false) 
        status >> field(editMode = AlwaysEdit)
        taskType >> field(stretch = 1, fontStyle = H2)
        name >> field(stretch = 1, fontStyle = H2)
        number >> field(fontStyle = Label)
      }
      tech
      row {
        product
        milestone >> field(title = name)
        backlog >> field(editMode = AlwaysRead)
      }
      spuUses
      effort
      devType >> field (label = "", visible = estimations)
      estimations >> field (label = "")
      urgency
      params >> list{grid(labels = None){
        param.title >> field(editMode = AlwaysRead)
        value
        param.desc >> field(fontSize = 0.75, editMode = AlwaysRead)
      }}
      desc
      howTo >> field(editMode = AlwaysRead)
      
      blockedByIssues >> field(label = "This tech task is blocked by")
      blocksItems >> field(label = "This tech task blocks")
    }
    edit {
      x{
        button("To User Story") {
          let d = desc
          let r = convertTo(UserStory)
          r.goal =? d
        }
        button("To Bug") {
          let d = desc
          let r = convertTo(Bug)
          r.steps =? d
        }
      }
    }
  }
}

inline entity ParamValue {
  field tech: TechTask
  field param: TaskParam {
    from = tech.taskType.params
  }
  field value: Text?
  func strValue: String? = value
}