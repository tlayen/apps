entity Incident extends Issue with DeferredJob {
  background = "#bb9605" icon = "question-circle"
  ref const field date: Date = now
  compute unrespondedTime: Duration? {
    value = (Date.now - rspDate).to[Duration[hour, 0]]
    visible = status.active || status == Pending
  }
  system const field rspDate: Date = now
  system const field revisionDate: Date?
  impl func service = NotifyService
  impl func jobDate = if (status == Revision let revisionDate) {
    if (urgency == Urgent) {
      revisionDate + 4_hour
    } else {
      revisionDate + 7_day
    }
  }
  system field preFailedStatus: IssueStatus?
  impl func requireEfforts = false
  impl compute title {
    value = "$number $product $subject"
  }  
  ref field support: User? {from = User.all.filter(is(Support))}
  impl event statusUpdated = {
    if (status in [InProgress, Failed, Implemented, ToTest, Closed, Verified, Revision, Pending] && User.current?.is(Support)) {
      support = User.current
    }
  }
  field urls: [Url]?
  ref impl compute product: PersonalProject {
    value = _product.as[PersonalProject]!
    update = {
      _product = new
      if (!spuUses && new.customerState in [Deployment, Preparation]) {
        IssueSpuUsage(issue = this, amount = 0, noChargeReason = Deployment)
      }
    }
  }
  func timeColor: String = {
    let ur = unrespondedTime
    if (ur >= urgency.norm) "#f00"
    else if (ur >= urgency.norm/2) "#dc8800"
    else "black"
  }
  field urgencyReason: Text? {
    visible = urgency == Urgent
    validate = if (urgency == Urgent && !urgencyReason) "Urgency reason is required for urgent incidents"
  }
  override func issueTypes = super.issueTypes- ITUnassigned + ITUnassignedIncident + ITUnprocessedIncident
 
  impl event onSave = {
    if (updated(status)) {
      if (status == Revision) {
        revisionDate = now
      } else if (status in [Todo, InProgress, Failed] && origin(status) !in [Todo, InProgress, Failed, Pending, Revision]) {
        rspDate = now
      }
    }
  }
  
  impl func do = {
    if (status == Revision) {
      status = InProgress
      save
    }
  }
  
  override func statuses: [IssueStatus] = IssueStatus.all.filter(_ !in [QAReview, Heap, Backlog, Entered, Postponed, ToTest, Verified, ToDoc])!.toSet
  override func defaultStatus = Todo
  override func isBlocking(issue: Issue): Bool = {
    issue.status.blocking || issue.status in [Implemented, Verified, ToTest, ToDoc] || (issue.status == Revision && issue.is[Incident])
  }
  ref field urgency: Urgency = Usual
  impl func numPrefix: String = "I"
  ref field subject: String?
  field desc: Text? {label = "Description"}
  impl func additionalDesire: IIDesire? = IntDesire(issue = this, rank = product.rank*urgency.rank)
  impl func itemRoles = [Support]

  impl view ref = y {
    x {number >> field(fontStyle = Label) title date >> field(fontStyle = Label)}
    x {DevIssueType.Incident urgency effort blockStatus >> field(compact = false) status >> field(editMode = AlwaysEdit) unrespondedTime >> field(color = timeColor) support}
  }
  impl view traitItem = grid(labels = None) {
    x {title date >> field(stretch = 1) number >> field(fontStyle = Label)}
    row {product milestone space}
    x {DevIssueType.Incident urgency effort blockStatus >> field(compact = false) status >> field(editMode = AlwaysEdit)  support unrespondedTime >> field(color = timeColor, align = Right, stretch = 1) }
  } 
  impl func type: DevIssueType = Incident
  
  impl func descUpdated: Bool = updated(activities) && activities.last?.comment
  impl view form = nav {
    grid {
      issuesView
      x(flow = false, label = ""){
        blockStatus >> field(compact = false) 
        status >> field(editMode = AlwaysEdit)
        unrespondedTime >> field(color = timeColor)
        subject >> field(stretch = 1, fontStyle = H2)
        number >> field(fontStyle = Label)
      }
      support
      urls
      row {
        product
        milestone >> field(title = name)
        backlog >> field(editMode = AlwaysRead)
      }
      x {
        product.supportUnits >> field (showEmpty, color = if (product.supportUnits > 0) "black" else "red" )
        label("Units", color = if (product.supportUnits > 0) "black" else "red")
        product.customerTypes product.customerState
      }
      spuUses
      urgency
      urgencyReason
      estimations >> field (label = "")
      desc 
      x { 
        add("New Bug") {
          Bug.incomplete(blocksItems = [this]).form.open
        }
        add("New Story") {
          UserStory.incomplete(blocksItems = [this]).form.open
        }
        add("New Tech Task") {
          TechTask.incomplete(blocksItems = [this]).form.open
        }
      }
      blockedByIssues >> field(label = "This incident is blocked by")
      blocksItems >> field(label = "This incident blocks")
    }
    x{
      //button("To Tech Task") {
      //  convertTo(TechTask)
      //}
      button("Spawn New Incident", visible = status == Failed) {
        let cc <- back {
          this.spawnNewIncident
        }
        cc.form.open
      }
    }
  }
  back func spawnNewIncident: Incident = {
    let a = activities.reverse.find(channel == EMail)
    let cc = this.copy(status = Todo, support = null, 
                       blockedByIssues = [], blocksItems = [], estimations = [], 
                       spuUses = [], urgency = Usual, urgencyReason = "", desc = ""
                      ).saveMain
    Activity.comment("New incident has been spawned from $(this.mention)")
    status = preFailedStatus.alt(Closed)
    a?.setMainEntity(cc)
    a?.save
    cc
  }
  
  report Report {
    field status: [IssueStatus]? {
      //auto
      default = [Todo, InProgress, Failed]
    }
    impl view list = Incident.all.filter(!this.status || status in this.status) >> nav{list{
      traitItem
    }}
  }
}

object ITUnassignedIncident extends IssueType[Incident] {
  impl func title = "Unassigned Incident"
  impl func hasIssue(item: Incident) = {
    item.status in [Todo, InProgress, Failed] && !item.support
  }
  impl func fixes(item: Incident) = if (User.current?.is(Support)) [
    Fix(text = "Take the incident", acts = [
      Act(label = "Take", icon = "spinner", do = {
        item.status = InProgress
        item.support = User.current
        UI.save(item)
      })
    ])
  ]
  impl func defaultLevel = Warning
}


enum SpuNoChargeReason {
  case Bug {icon = "bug"}
  case MissingHelp {icon = "hands-helping"}
  case Feedback {icon = "comment-dots"}
  case NewFeature {icon = "rss-square"}
  case SalesOpportunity {icon = "dollar-sign"}
  case Deployment {icon = "spinner"}
}

object ITUnprocessedIncident extends IssueType[Incident] {
  impl func title = "Unprocessed Incident"
  impl func defaultLevel = ToDo
  impl func isForUser(item: Incident, user: User) = user == item.support
  impl func hasIssue(item: Incident) = {
    (item.status.active && item.status != Revision && item.status != Implemented) || 
    (item.status in [Pending, Revision] && item.urgency == Urgent)
  }
  front func noCharge(item: Incident, reason: SpuNoChargeReason) = {
    item.status = Closed
    item.support = User.current
    IssueSpuUsage(issue = item, noChargeReason = reason, amount = 0)
    UI.save(item)
  }
  impl func fixes(item: Incident) = 
    (if (item.spuUses) [Fix(text = "Respond the incident and close", acts =  [
      Act(label = "Close", icon = "check-circle", color = "#090", do = {
        item.status = Closed
        item.support = User.current
        UI.save(item)
      })
    ])] else [
      Fix(text = "Close and charge 1 unit", acts =  [
        Act(label = "Close", icon = "check-circle", color = "#090", do = {
          item.status = Closed
          item.support = User.current
          IssueSpuUsage(issue = item)
          UI.save(item)
        })
      ])
      Fix(text = "No charge due to", acts =  [
        Act(label = "Bug", icon = "bug", color = "#c00", do = {noCharge(item, Bug)}),
        Act(label = "Missing Help", icon = "hands-helping", color = "#c00", do = {noCharge(item, MissingHelp)}),
        Act(label = "Feedback", icon = "comment-dots", color = "#c00", do = {noCharge(item, Feedback)}),
        Act(label = "New Feature", icon = "rss-square", color = "#c00", do = {noCharge(item, NewFeature)}),
        Act(label = "Sales Opportunity", icon = "dollar-sign", color = "#c00", do = {noCharge(item, SalesOpportunity)})
      ])
    ])
    +
    [
      Fix(text = "Clarify the incident and send to revision", acts = [
      Act(label = "Revision", icon = "redo", color = "#ef8e48", do = {
        item.status = Revision
        item.support = User.current
        UI.save(item)
      })
    ])
    Fix(text = "Make the incident blocked by another issue, inform the customer and set pending", acts = [
      Act(label = "Pending", icon = "hourglass-half", color = "#d63b89", do = {
        item.status = Pending
        item.support = User.current
        UI.save(item)
      })
    ])
  ]
}
