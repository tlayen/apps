object ITBacklogLimitsExceeded extends IssueType[Backlog] {
  impl func title = "Backlog Limits Exceeded"
  impl func hasIssue(item: Backlog) = {
    item.backlogLimit < item.backlogSize || item.heapLimit < item.heapSize || item.enteredLimit < item.enteredSize || item.devLimit < item.devSize || item.qaLimit < item.qaSize
  }
  impl func defaultLevel = Warning
}

entity Backlog {
  background = "#545790"
  field active: Bool
  field devType: DevType = ProdDev
  ref field name: String? {views = []}
  impl ref compute title {
    value = name.alt(products.first!.title)
    update = {
      this.name = new
    }
  }
  field products: [DevProduct]? by backlog 
  ref compute oneProduct: DevProduct? {
    value = if (products.count == 1) products.first else null
    views = []
  }
  
  impl func itemRoles = [ProductOwner, Developer]
  override func issueTypes = super.issueTypes + ITBacklogLimitsExceeded
 
  impl func canRead = products.all(_.as[PersonalProject]?.isTheir)

  system field allIssues: [BacklogIssue]? read by backlog {views = []}
  
  compute verifiedIssues {
    label = "Verified"
    value = allIssues.filter(status in [ToDoc, Verified])
    update = {
      allIssues = new + allIssues.filter(_.status !in [Verified, ToDoc])
    }
  }
  compute qaIssues {
    label = "QA"
    value = allIssues.filter(status == ToTest)
    update = {
      allIssues = allIssues.filter(_.status in [ToDoc, Verified]) + new + allIssues.filter(_.status != ToTest)
    }
  }
  compute progressIssues {
    label = "In Progress"
    value = allIssues.filter(status in [InProgress, Failed, Implemented])
    update = {
      allIssues = allIssues.filter(_.status in [ToTest, ToDoc, Verified]) + new + allIssues.filter(_.status in [Todo, Backlog, ToEstimate, Heap, Entered, QAReview])
    }
  }
  compute todoIssues {
    value = allIssues.filter(status == Todo)
    update = {
      allIssues = allIssues.filter(_.status in [InProgress, Failed, Implemented, ToTest, ToDoc, Verified] ) + new + allIssues.filter(_.status in [Backlog, ToEstimate, Heap, Entered, QAReview])
    }
  }
  compute backlogIssues {
    value = allIssues.filter(status == Backlog)
    update = {
      allIssues = allIssues.filter(_.status !in [Backlog, ToEstimate, Heap, Entered, QAReview]) + new + allIssues.filter(_.status in [ToEstimate, Heap, Entered, QAReview])
    }
  }
  compute estimateIssues {
    value = allIssues.filter(status == ToEstimate)
    update = {
      allIssues = allIssues.filter(_.status !in [ToEstimate, Heap, Entered, QAReview]) + new + allIssues.filter(_.status in [Heap, Entered, QAReview])
    }
  }
  compute heapIssues {
    value = allIssues.filter(status == Heap)
    update = {
      allIssues = allIssues.filter(_.status !in [Heap, Entered, QAReview]) + new + allIssues.filter(_.status in [Entered, QAReview])
    }
  }
  compute enteredIssues {
    value = allIssues.filter(status == Entered)
    update = {
      allIssues = allIssues.filter(_.status !in [Entered, QAReview]) + new + allIssues.filter(_.status == QAReview)
    }
  }
  compute qaReviewIssues {
    value = allIssues.filter(status == QAReview)
    update = {
      allIssues = allIssues.filter(_.status != QAReview) + new
    }
  }
  
  field backlogLimit: UInt = 30
  field heapLimit: UInt = 50
  field enteredLimit: UInt = 10
  field devLimit: UInt = 10
  field qaLimit: UInt = 10
  
  compute backlogSize: UInt? = backlogIssues.count
  compute heapSize: UInt? = heapIssues.count
  compute enteredSize: UInt? = enteredIssues.count
  compute devSize: UInt? = allIssues.filter(status in [InProgress, Failed, Implemented, ToEstimate, Todo]).count
  compute qaSize: UInt? = qaIssues.count + qaReviewIssues.count
  view backlogView = backlogIssues >> list(editMode = AlwaysRefRead, frame = true) {
    x(flow = false) {
      //grid (margin = None) {
        ref >> field(stretch = 1)
      //}
      button("↓") {
        backlog!.backlogIssues = backlog!.backlogIssues.filter(i => i != _) + _
        UI.save(backlog!.save)
      }
      button("↑") {
        backlog!.backlogIssues = _ + backlog!.backlogIssues.filter(i => i != _)
        UI.save(backlog!.save)
      }
    }
  }  
 
  
  impl view form = nav{
    tabs {
      grid(labels = None, label = "Backlog"){
        title
        row{
          "$backlogSize of $backlogLimit backlog" >> field(color = if (backlogLimit < backlogSize) "red" else "black")
          "$heapSize of $heapLimit heap" >> field(color = if (heapLimit < heapSize) "red" else "black")
          "$enteredSize of $enteredLimit entered" >> field(color = if (enteredLimit < enteredSize) "red" else "black")
          "$devSize of $devLimit dev" >> field(color = if (devLimit < devSize) "red" else "black")
          "$qaSize of $qaLimit qa" >> field(color = if (qaLimit < qaSize) "red" else "black")
        }
        backlogView
      }
      grid(labels = None, label = "Heap") {
        heapIssues >> list(frame = true) {ref}
      }
      grid(labels = None, label = "Entered") {
        enteredIssues >> list(frame = true) {ref}
      }
      grid(labels = None, label = "Development") {
        progressIssues >> list(frame = true) {ref}
        estimateIssues >> list(frame = true) {ref}
        todoIssues >> list(frame = true) {ref}
      }
      grid(labels = None, label = "QA") {
        qaIssues >> list(frame = true) {ref}
        qaReviewIssues >> list(frame = true) {ref}
      }
      grid(labels = None, label = "Verified") {
        verifiedIssues >> list(frame = true) {ref}
      }
      grid(labels = Top, label = "Settings"){
        title 
        active
        row {backlogLimit heapLimit enteredLimit}
        row { devLimit qaLimit space}
        products
      }
    }
    
  }
  /*
  impl view form = nav{
    grid(labels = Top, label = "Settings"){
      title 
      status
      products
    }
    button("➠") {
      Issue.Report(backlog = this).list.open
    }
  }
  impl view ref = x(flow = false, margin = None) {
    title
    button("➠") {
      Issue.Report(backlog = this).list.open
    }
  }
  */
  impl object view list = Backlog.all >> nav{list{
    title
  }}
  
}
