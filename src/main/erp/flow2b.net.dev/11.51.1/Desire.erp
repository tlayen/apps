interface IIDesire {
  func issue: Issue
  func rank: UDec[2]?
}
  
trait IDesire extends InlineEntity with IIDesire {
  impl field issue: Issue by desires
}
inline entity Desire extends IDesire {
  field actor: Actor by desires {
    available(Ref).with(rank)
  }
  field strength: DesireStrength
  field comment: Text?
  impl view form = grid (labels = None, margin = TopBottom) {
    x{actor >> field(stretch = 1) issue  strength}
    comment
  }
  impl func rank: UDec[2]? = {
    if (issue.product.as[PersonalProject]?.actor == actor) 0.00
    else actor.rank * strength.rank
  }
}

inline entity AllUsersDesire extends IDesire {
  field strength: DesireStrength
  field comment: Text
  impl view form = grid (labels = None, margin = TopBottom) {
    x{label("All Users", stretch = 1) issue strength}
    comment
  }
  impl func rank: UDec[2]? = {
    if (issue.product.is[PersonalProject]) 0.00 
    else issue.product.rank * strength.rank * 0.70
  }
}


enum DesireStrength(rank: UDec[2]) {
  case VeryStrong(rank = 1.20) {background = "#f99"}
  case Strong(rank = 0.50) {background = "#ed9"}
  case Weak(rank = 0.25) {background = "#efd"}
}

class IntDesire extends IIDesire {
  impl field issue: Issue
  impl field rank: UDec[2]?
}