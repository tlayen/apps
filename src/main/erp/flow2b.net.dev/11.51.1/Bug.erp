enum Severity(rank: UDec[2]) {
  case Critical(rank = 5.00) {color = "white" background = "#c00"}
  case Major(rank = 2.00) {background = "#f99"}
  case Minor(rank = 1.00) {background = "#efd"}
}

enum AffectedPercent(value: Dec[2], rank: UDec[2]) {
  case P1(value = 0.01, rank = 0.10) {label = "1%" background = "#efd"}
  case P5(value = 0.05, rank = 0.20) {label = "5%" background = "#dea"}
  case P10(value = 0.10, rank = 0.30) {label = "10%" background = "#dd9"}
  case P20(value = 0.20, rank = 0.50) {label = "20%" background = "#ed9"}
  case P40(value = 0.40, rank = 0.80) {label = "40%" background = "#ea9"}
  case P60(value = 0.60, rank = 0.90) {label = "60%" background = "#f99990"}
  case P100(value = 1.00, rank = 1.00) {label = "100%" background = "#f99"}
}


enum Problem(severities: [Severity -> PlainText?], severity: Severity, desc: PlainText?) {
  case DataDamage(severities = [Critical -> ""], severity = Critical, desc = "Data can be damaged or lost.") {
    color = "white" background = "#c00"
  }
  case Security(severities = [Critical -> "Real threat", Major -> "Potential threat"], severity = Critical, desc = "Security problem.") {
    color = "white" background = "#c00"
  }
  case SystemInstability(severities = [Critical -> ""], severity = Critical, desc = "System is down or too slow for everybody") {
    color = "white" background = "#c00"
  }
  case CannotEnterData(severities = [Critical -> ""], severity = Critical, desc = "Important data cannot be entered with no workaround.

For example Sales Order cannot be entered.") {
    color = "white", background = "#c00"
  }
  case CannotReadData(severities = [Critical -> ""], severity = Critical, desc = "You cannot access an important non-computed item or list with no workaround.
If you cannot access a report, it's a Computation Error.

For example list of Sales Orders cannot be opened.") {
    color = "white", background = "#c00"
  }

  case ComputationError(
    severities = [
      Critical -> "Can lead to potential data damage or have a significant adverse effect on the business processes.
      
For example, error in stock calculation which leads to wrong products on the website, double sales etc.",
      Major -> "No potential data damage or severe adverse effect on the business processes. 
      
For example wrong data in a report or compute field."
    ], severity = Major, 
    desc = "Incorrect computation result in a field, a report or in integration."
  ) {background = "#f99"}
  
  case Spelling(severities = [Major -> ""], severity = Major, desc = "Spelling mistake.") {background = "#f99"}
  case SystemError(severities = [
    Major -> "The error is displayed quite often with the steps which makes sense.", 
    Minor -> "The error can be seen in a rare use case."
  ], severity = Major, desc = "System error displayed when it should not.") {background = "#f99"}
  case Inconvenience (severities = [
    Critical -> "The inconveniece makes it really hard to work with the system.", 
    Major -> "The inconveniece is bearable.", 
    Minor -> "The inconveniece is not significant."
  ], severity = Major, desc = "It makes it harder to work but workaround exists.") {background = "#f99"}
  
  case DslCompilation(severities = [Major -> ""], severity = Major, desc = "Incorrect or misleading Dsl compilation errors or absense of necessary error.") {background = "#f99"}
  case Performance(severities = [
    Critical -> "It affects a usual process and makes it really hard to work with the system.",
    Major -> "It's slow but bearable or the process is not very usual.",
    Minor -> "The slow down is not significant or the process is very rare."
  ], severity = Major, desc = "Something working too slow"){background = "#f99"}
  
  
  case UnexpectedBehaviour (severities = [
    Major -> "It's confusing for a large percentage of users, it's hard to learn how to do it correctly and affecting the business processes.", Minor -> ""
  ], severity = Minor, desc = "It's confusing and unexpected how it's working but it works correctly.") {background = "#efd"}
  case BadLook (severities = [
     Major -> "It looks really bad!", Minor -> "It does not look nice."
  ], severity = Minor, desc = "Something looks not very good.") {background = "#efd"}
  case Other(severities = [Critical -> "", Major -> "", Minor -> ""], severity = Minor, desc = "Something not in the list.") {background = "#efd"}
 
}

enum Stability {
  case Always {background = "#f99"}
  case Often {background = "#ffb16c"}
  case Sometimes {background = "#ed9"}
  case Once {background = "#efd", label = "Once Upon a Time"}
}

entity Bug extends DevIssue {
  icon = "bug"
  background = "#a21717"
  ref field problem: Problem {
    update = {
      this.severity = problem.severity
    }
  }
  
  ref field severity: Severity {
    from = problem.severities.keys
  }
  
  compute problemDesc: Text = problem.desc 
  compute severityDesc: Text? = problem.severities(severity)

  //impl func itemPriority: Dec[8]?  = if (status == QAReview) 0.3 else if (status == Entered) 0.8 else 0.0
  field steps: Text {
    label = "Steps to reproduce (from beginning to end)"
  }
  field stability: Stability {
    label = "How often it can be reproduced (please try to reproduce again)"
  }
  field affected: AffectedPercent {
    default = P100
    label = "Affected percent of users of the app"
  }
  field criticalReason: Text? { 
    label = "Reason for the bug to be Critical"
    visible = severity == Critical && problem.severity != Critical
    validate = if (severity == Critical && problem.severity != Critical && !criticalReason) "The critical reason should be entered"
  }
  field actualResult: Text
  field expectedResult: Text 
  field additionalInfo: Text?
  
  impl func numPrefix: String = "B"
  impl func additionalDesire: IIDesire? = IntDesire(issue = this, rank = product.rank * severity.rank * (if (severity == Critical) 1.00 else affected.rank))
  
  impl func descUpdated: Bool = updated(actualResult) || updated(expectedResult) || updated(additionalInfo) || updated(title)
  impl func defaultStatus: IssueStatus = if (User.current!.is(QA)) Entered else QAReview
  impl event onSave = {
    if (created && severity == Critical) {
      User.all(ProductOwner).filter(ownedBacklogs.contains(this.backlog))*.join(this)
      User.all(Developer).filter(developingBacklogs.contains(this.backlog))*.join(this)
      joinAll(QA)
    }
  }
  impl view ref = y {
    x{number >> field(fontStyle = Label) title product >> field(fontStyle = Label)}
    x{DevIssueType.Bug severity effort blockStatus >> field(compact = false) status >> field(editMode = AlwaysEdit) itemUser} 
  }
  impl view traitItem = grid(labels = None) {
    x {title >> field(stretch = 1) number >> field(fontStyle = Label)}
    row {product milestone space}
    x {DevIssueType.Bug severity effort blockStatus >> field(compact = false) status >> field(editMode = AlwaysEdit)}
  }
  /*impl view quick = grid {
    x(flow = false, label = ""){
      blockStatus >> field(compact = false)
      status >> field(editMode = AlwaysEdit)
      name >> field(stretch = 1, fontStyle = H2)
      number >> field(fontStyle = Label)
    }
    product
    problem     
    effort
    steps
    stability
    actualResult
    expectedResult
    additionalInfo
  }*/
  
  impl view form = nav {
    grid(label = "Main") {
      x(flow = false, label = ""){
        blockStatus >> field(compact = false)
        status >> field(editMode = AlwaysEdit)
        name >> field(stretch = 1, fontStyle = H2)
        number >> field(fontStyle = Label)
      }
      core
      apps
      row{epic >> field(title = title) feature}
      developer
      row {
        product
        milestone >> field(title = name)
        backlog >> field(editMode = AlwaysRead)
      }
      spuUses

      x (label = "Problem", visible = !ui.edit) {severity >> field (visible = (try? problem)?.severities.keys.count > 1) problem} 
      edit {
        problem 
        problemDesc >> field(label = "", editMode = AlwaysRead, color = "#900")
        severity >> field (visible = (try? problem)?.severities.keys.count > 1)
        severityDesc >> field(label = "", editMode = AlwaysRead, color = "#900")
      }

      criticalReason
      affected
      effort
      devType >> field (label = "", visible = estimations)
      estimations >> field (label = "")

      steps
      stability
      actualResult
      expectedResult
      additionalInfo
      blockedByIssues >> field(label = "This bug is blocked by")
      blocksItems >> field(label = "This bug blocks") 
      desires

    }
      
    edit {
      x{
        button("To User Story") {
          let s = steps
          let d = actualResult + expectedResult + additionalInfo
          let r = convertTo(UserStory)
          r.goal = s
          r.additionalInfo = d
        }
        button("To Dev Task") {
          let d = steps + actualResult + expectedResult
          let r = convertTo(DevTask)
          r.description = d
        }
        button("To Tech Task") {
          let d = steps + actualResult + expectedResult
          let r = convertTo(TechTask)
          r.desc = d
        }
        
      }
    }
  }
  impl func type: DevIssueType = Bug
}