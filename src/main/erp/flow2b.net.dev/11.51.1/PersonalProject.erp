entity PersonalProject extends DevProduct {
  func isTangible = false
  
  ref field name: String?
  impl func title = "$actor $name"
  impl func type: ProductType = ProductType.Project
  ref field actor: Actor by projects {
    available(Inline).for(Inline)
  }
  ref compute customerTypes = actor.as[LegalEntity]?.customer?.types
  ref compute customerState = actor.as[LegalEntity]?.customer?.state
  impl ref compute supportUnits = actor.as[LegalEntity]?.customer?.supportUnits
  compute questionnaires: [Questionnaire]? {
    value = actor.questionnaires
  } 
  impl ref field devType: DevType = ProdDev
    
  func subProducts = [this]
  func isTheir = actor.isTheir
  impl func canRead: Bool = isTheir
  impl func canWrite: Bool = false //isTheir
  impl func multiupdate = [actor]
  impl ref stored compute rank: UDec[2] = actor.rank
  compute issuesByMilestone: [(milestone: Milestone?, blockStatus: BlockStatus?, isBlocked: Bool, issues: [Issue]?)] {
    availableFor = Inline
    value = {
      let mbs = milestones*.blockedByActiveIssues
      let bbs = insidentsBlocked.filter(!mbs.contains(_))
      let bb: BlockStatus? = BlockStatus.fromValue(bbs*.effort*.value.sum)
      
      milestones.flatMap{m =>
        let milestone: Milestone? = (m)
        [
          (milestone, milestone?.blockStatus, false, issues = m.milestoneIssues.filter(status.active))
          (milestone, milestone?.blockStatus, true, m.blockedByActiveIssues)
        ]
      } + (milestone = null[Milestone], bb, false, devIssues.filter(!milestone && !_.is[Incident] && status.active))
        + (milestone = null[Milestone], bb, true, bbs)
    }
  }
  
  compute unresolvedIncidents: [Incident]? {
    availableFor = Inline
    value = devIssues*.as[Incident].filter(status.active || status == Pending)
  }
  compute insidentsBlocked: [Issue]? {
    value = unresolvedIncidents*.blockedByActiveIssues.distinct.filter(!_.is[Incident] && _.product != this && status.active)
  }
  //compute resolvedIncidents: [Incident]? = issues*.as[Incident].filter(!status.active && status != Pending)
  
  ref compute blockStatus = milestones.first?.blockStatus
  impl view ref = x (flow = false) {blockStatus title}
  impl view form = nav {
    tabs{
      grid (label = "Milestones") {
        x {blockStatus actor name} 
        
        questionnaires >> field (editMode = AlwaysRead)
        issuesByMilestone.filter(issues) >> subtotal(label = "Issues") {
          x {
             milestone >> field(title = name) 
             label("No Milestone", visible = !milestone, fontStyle = Normal) 
             label("blocked by", visible = isBlocked) 
             blockStatus >> field(visible = isBlocked) 
          } 
          list {ref}
        }
        x {
          add("Tech Task") {
            TechTask.incomplete(product = this).form.open
          }
          add("User Story") {
            UserStory.incomplete(product = this, backlog = backlog!).form.open
          }
          add("Bug") {
            Bug.incomplete(product = this, backlog = backlog!).form.open
          }
          add("Milestone") {
            Milestone.incomplete(products = [this]).form.open
          }
        }

      }
      grid (label = "Description") {
        files
        description
      }
      grid (label = "Desires") {
        actor.desires 
      }
      grid (label = "Incidents", visible = unresolvedIncidents) {
        unresolvedIncidents
      }
      grid (label = "Tickets", visible = actor.tickets) {
        actor.tickets
      }
      grid (labels = Right, label = "Settings") {
        actor
        name
        status
        devType
        rank
        sandboxWorkspace
        extension
        roadmap
        backlog
        dependencies
        milestones >> list {
          x(flow = false){status title}
        }
        features 
        docs
        packageDocs
      }
  }
    button("Issues") { openIssues }
  }
  
  impl object view list = PersonalProject.all >> nav {list{
    x{type, actor, blockStatus, title}
  }}
  
  /*impl event onSave = {
    milestones*.touch
    issues*.touch
  }*/
}
